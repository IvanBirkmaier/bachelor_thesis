# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# NOTE: Environment variables containing the necessary secrets can be setup in the CircleCI UI
# See here https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  node: circleci/node@4.1
#https://circleci.com/developer/orbs/orb/circleci/heroku
  heroku: circleci/heroku@1.2
#https://circleci.com/developer/orbs/orb/nrwl/nx#commands-set-shas
  nx: nrwl/nx@1.6.1
#https://circleci.com/developer/orbs/orb/circleci/docker
  docker: circleci/docker@2.2.0 
#https://circleci.com/docs/executor-intro/?utm_source=google&utm_medium=sem&utm_campaign=sem-google-dg--emea-en-dsa-maxConv-auth-nb&utm_term=g_-_c__dsa_&utm_content=&gclid=CjwKCAiAzp6eBhByEiwA_gGq5Er6dJtC6aT0StgG9BSK02B6lrmrkcenw_pmb-akGu-i4rZveek8zBoCV9QQAvD_BwE
executors:
  node-exe:
    docker:
      - image: cimg/node:19.3.0
  docker-exe:
    docker:
      - image: docker:17.05.0-ce-git
jobs:
  lint-test-build-affected-services:
    executor: node-exe 
    steps:
      - checkout
      - run: npm ci
      - nx/set-shas
      # - run: npx nx workspace-lint
      # - run: npx nx format:check
      - run: npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=lint --parallel=3
      - run: npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=test --parallel=3 --ci --code-coverage
      - run: npx nx affected --base=$NX_BASE --head=$NX_HEAD --target=build --parallel=3
  nx_build_baseImage:
    executor: docker-exe
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Base Image, tagged with CircleCI Build Number
          command: |
            docker build -t ivanbirkamier/nxbasimages:"$CIRCLE_BUILD_NUM" .
            docker tag ivanbirkamier/nxbasimages:"$CIRCLE_BUILD_NUM" ivanbirkamier/nxbasimages:latest
      - run:
          name: Push Base Image to Docker Hub
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
            docker push ivanbirkamier/nxbasimages:latest
            docker push ivanbirkamier/nxbasimages:"$CIRCLE_BUILD_NUM"
  nx_build_nestjsbackend:
    executor: docker-exe
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Nx NestJS Image, tagged with CircleCI Build Number
          command: |
            cd apps/backend
            docker build -t ivanbirkamier/nxnestjsbackend:"$CIRCLE_BUILD_NUM" .
            docker tag ivanbirkamier/nxnestjsbackend:"$CIRCLE_BUILD_NUM" ivanbirkamier/nxnestjsbackend:latest
      - run:
          name: Push NestJS Image to Docker Hub
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
            docker push ivanbirkamier/nxnestjsbackend:latest
            docker push ivanbirkamier/nxnestjsbackend:"$CIRCLE_BUILD_NUM"
  nx_build_nxangularfrontend:
    executor: docker-exe
    working_directory: ~/project
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Nx Angular Image, tagged with CircleCI Build Number
          command: |
            cd apps/frontend
            docker build -t ivanbirkamier/nxangularjsfrontend:"$CIRCLE_BUILD_NUM" .
            docker tag ivanbirkamier/nxangularjsfrontend:"$CIRCLE_BUILD_NUM" ivanbirkamier/nxangularjsfrontend:latest
      - run:
          name: Push Angular Image to Docker Hub
          command: |
            docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
            docker push ivanbirkamier/nxangularjsfrontend:"$CIRCLE_BUILD_NUM"
            docker push ivanbirkamier/nxangularjsfrontend:latest   
  deploy:
    executor: docker-exe
    working_directory: ~/project
    steps:
    

workflows:
  affected-services:
    jobs:
      - lint-test-build-affected-services
      - nx_build_baseImage:
            requires:
              - lint-test-build-affected-services
      - nx_build_nestjsbackend:
            requires:
              - nx_build_baseImage
      - nx_build_nxangularfrontend:
            requires:
                - nx_build_baseImage


###################################################################################################################################################
############################################            Notizen          #############################################################################
#####################################################################################################################################################
#   # Below is the definition of your workflow.
#   # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
#   # CircleCI will run this workflow on every commit.
#   # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
#   sample:
#     jobs:
#       - node/test
#       - heroku/deploy-via-git:
#           force: true # this parameter instructs the push to use a force flag when pushing to the heroku remote, see: https://devcenter.heroku.com/articles/git
#           requires:
#             - node/test # only run deploy-via-git job if the build job has completed
#           filters:
#             branches:
#               # This sample config runs this job on any branch matching the regex below, however, it's more likely you want to only run this job on master.
#               only: /.*-heroku-deploy/ # Delete this line
#               # only: master  # Uncomment this line
#####################################################################################################################################################
###################################### BEISPIEL FÜR EINEN DOCKER COMPOSE-PUSH #######################################################################
#####################################################################################################################################################
# build_image1:
#     working_directory: ~/project
#     steps:
#       - checkout
#       - run:
#           name: Build Image 1
#           command: |
#             docker-compose build
#       - run:
#           name: Push Images to Docker Hub
#           command: |
#             echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
#             docker-compose push




# commands:
# #Definiert Commands die immer wieder verwendet werden können
# # BSP: build:
#         steps: #(Kollection an ausführbaren Befehlen)
#           # - run: npx nx serve frontend
# executors:
# #Legt die Build-Enviroment fest (Docker, VM)
# # BSP: docker-exe:
#         # docker:
#             #image: circleci/node:9.0.9
# jobs:
# #Definieren einzelne schritte, die bestimmte commands beinhalten 
# #  BSP: build-frontend-with-docker:
#               # executor: docker-exe (wie oben definiert)
#               steps:
#                 #-build (wie oben definiert)
# #braucht immer einen executer
# workflows:
# # Managed die einzelnen Jobs
# # BSP: Workflow1:
# #         jobs: 
#             #-build-frontend-with-docker (wie oben definiert)
#             #-build2
#                 #requires:
#                   #build-frontend-with-docker (build 2 kann erst starten wenn build-frontend-with-docker fertig ist)

# #Docker Layer Chaching

# #parallelism key auf Job ebene um bsp. mehrere Test parallel ausführen zu können in einem Job indem es sie auf verschiedene exicuters, 
# #vom im job definierten executer verteilt

# # - checkout Command fetch den Code aus dem Repository

